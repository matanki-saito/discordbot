buildscript {
    ext.versions = [
            // redis client 実装
            // https://lettuce.io/
            'lettuce'              : '6.1.8.RELEASE',

            // http client
            // https://square.github.io/okhttp/
            'okhttp'               : '4.9.3',
            'retrofit'             : '2.9.0',

            // discord client library
            // https://github.com/DV8FromTheWorld/JDA
            'JDA'                  : '5.0.0-alpha.21',

            // discord pagination util
            // https://github.com/ygimenez/Pagination-Utils
            'JDAUtils'             : '3.0.8',

            // apache common Lang
            // https://commons.apache.org/
            'apacheCommonLang'     : '3.12.0',

            // log
            // http://www.slf4j.org/
            'slf4jApi'             : '1.7.36',

            // elastic search（テキスト検索）
            // https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/index.html
            'elasticsearch'        : '7.17.3',

            // エラーDiscord通知
            // https://github.com/napstr/logback-discord-appender
            'logbackDiscord'       : '1.0.0',

            // 日付処理用
            // https://qiita.com/tag1216/items/25a64bba2bde98ea88d3
            'jacksonDatatypeJsr310': '2.13.2',

            // test用
            // https://assertj.github.io/doc/
            'assertj'              : '3.22.0',

            // lombok
            // https://mvnrepository.com/artifact/org.projectlombok/lombok
            'lombok'               : '1.18.24',

            // micrometer
            // spring actuatorがprometheus形式でmetrixを出力するために必要
            'micrometer'           : '1.8.5',

            // grpc用。サービス間通信で使う
            // https://github.com/LogNet/grpc-spring-boot-starter
            // https://grpc.io/
            // https://github.com/grpc/grpc-java
            'grpcSpringStarter'    : '4.7.0',
            'grpc'                 : '3.20.1',
            'grpcGenJava'          : '1.45.1'
    ]
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version "1.0.11.RELEASE"
    // Dockerhubにdocker imageをuploadするのに必要
    // https://github.com/palantir/gradle-docker
    id 'com.palantir.docker' version "0.33.0"
    // リリース処理に必要
    // https://github.com/researchgate/gradle-release
    id 'net.researchgate.release' version "2.8.1"
    // schemaspyで作った結果をダウンロードするのに必要
    // https://github.com/michel-kraemer/gradle-download-task
    id "de.undercouch.download" version "5.0.5"
    // actuator apiでコミットversionを確認する
    // https://plugins.gradle.org/plugin/com.gorylenko.gradle-git-properties
    id "com.gorylenko.gradle-git-properties" version "2.4.0"
    // githubのリリースを登録するのに必要
    // https://github.com/ajoberstar/gradle-git-publish
    id 'org.ajoberstar.git-publish' version '4.1.0'
    // intellijでprotoをコンパイルするのに必要
    id "com.google.protobuf" version "0.8.18"
}

group = 'com.popush'
sourceCompatibility = "17.PREVIEW"
targetCompatibility = "17.PREVIEW"

gitProperties {
    customProperty 'version', version
}

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
}

bootJar {
    archiveBaseName = 'henrietta-docker'
    archiveVersion = '1.0.0'
}

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add('--enable-preview')
}

// コメントに日本語があるので必要
javadoc {
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

gitPublish {
    repoUri = "git@github.com:matanki-saito/discordbot.git"
    branch = 'master'

    contents {
        from(javadoc) {
            into 'docs/javadoc'
        }
        from("$buildDir/docs/schemadoc") {
            into "docs/schemadoc"
        }
    }

    preserve {
        include '**'
        exclude 'docs'
    }

    commitMessage = '[skip ci] Publishing a new page'
}

// このアプリケーションでは作れないので、別にあるサーバで生成する
// http://etc9.hatenablog.com/entry/2015/02/25/183902
task schemaspydoc {
    outputs.upToDateWhen { file('build/docs/schemadoc').exists() }
    doLast {
        def downloadedFile = new File(buildDir, 'downloaded/schemaspy.zip')
        download {
            src 'http://localhost:8080/download?host=127.0.0.1:3306&database=testdb&user=root&pass=1qaz2wsx'
            dest downloadedFile
        }
        copy {
            from zipTree(downloadedFile)
            into new File(projectDir, 'build/docs/schemadoc')
        }
    }
}

docker {
    name "gnagaoka/henrietta-app:" + version
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

// junit 5対策
// https://stackoverflow.com/questions/30474767/no-tests-found-for-given-includes-error-when-running-parameterized-unit-test-in
test {
    useJUnitPlatform()
}

release {
    // [skip ci]をコメントに入れないと、無限ループする
    preTagCommitMessage = '[skip ci] [Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[skip ci] [Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[skip ci] [Gradle Release Plugin] - new version commit: '
}

dependencies {
    // spring boot
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-data-redis")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-actuator")

    // other
    implementation("io.micrometer:micrometer-registry-prometheus:${versions.micrometer}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jacksonDatatypeJsr310}")
    implementation("org.apache.commons:commons-lang3:${versions.apacheCommonLang}")
    implementation("io.lettuce:lettuce-core:${versions.lettuce}")
    implementation("com.squareup.okhttp3:okhttp:${versions.okhttp}")
    implementation("com.squareup.retrofit2:retrofit:${versions.retrofit}")
    implementation("com.squareup.retrofit2:converter-jackson:${versions.retrofit}")
    implementation('com.github.ben-manes.caffeine:caffeine')
    implementation("org.slf4j:slf4j-api:${versions.slf4jApi}")
    implementation("com.github.napstr:logback-discord-appender:${versions.logbackDiscord}")
    implementation("net.dv8tion:JDA:${versions.JDA}")
    //implementation("com.github.ygimenez:Pagination-Utils:${versions.JDAUtils}")
    // 上記からForkされた物。JDA5.x.xに追従している
    implementation 'com.github.Black0nion:Pagination-Utils:3.3.0'
    implementation("org.elasticsearch.client:elasticsearch-rest-high-level-client:${versions.elasticsearch}")
    // elasticsearch-rest-clientはhigh-level-clientに必要
    // https://medium.com/@hsiehjenhsuan/%E8%A7%A3%E6%B1%BA-elasticsearch-%E4%BD%BF%E7%94%A8-java-high-level-rest-client-%E6%99%82%E5%87%BA%E7%8F%BE-noclassdeffounderror-%E9%8C%AF%E8%AA%A4-10077fcda6b3
    // runtimeOnlyに移しても一見動作するが、bulk insertするとIncompatibleClassChangeErrorが出る
    implementation("org.elasticsearch:elasticsearch:${versions.elasticsearch}")
    implementation("org.elasticsearch.client:elasticsearch-rest-client:${versions.elasticsearch}")

    // githubを操作するために導入
    // https://mvnrepository.com/artifact/org.kohsuke/github-api
    implementation group: 'org.kohsuke', name: 'github-api', version: '1.313'

    // grpc
    implementation("io.github.lognet:grpc-spring-boot-starter:${versions.grpcSpringStarter}")

    compileOnly("org.projectlombok:lombok:${versions.lombok}")
    // lombokにはcompileOnly,annotationProcessor,testImplementationが必要
    // https://medium.com/@tsuyoshiushio/gradle-5-0-with-lombok-and-spring-boot-e8ca564fc552
    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation("org.projectlombok:lombok:${versions.lombok}")
    testImplementation("com.squareup.okhttp3:mockwebserver:${versions.okhttp}")
    testImplementation("org.assertj:assertj-core:${versions.assertj}")

}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${versions.grpc}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${versions.grpcGenJava}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// for IDEA
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}
